'use client';

import { useCallback } from 'react';

declare global {
  interface Window {
    hj: any;
    _hjSettings: any;
  }
}

export const useHotJar = () => {
  // Fun√ß√£o para verificar se o HotJar est√° dispon√≠vel
  const isHotJarAvailable = useCallback(() => {
    const available = !!window.hj;
    console.log('HotJar dispon√≠vel:', available);
    return available;
  }, []);

  // Fun√ß√£o para identificar usu√°rio
  const identifyUser = useCallback((userData: {
    userId?: string | number;
    userEmail?: string;
    userName?: string;
    [key: string]: any;
  }) => {
    if (!window.hj) {
      console.warn('HotJar n√£o est√° dispon√≠vel para identificar usu√°rio');
      return false;
    }

    try {
      window.hj('identify', userData);
      console.log('‚úÖ Usu√°rio identificado no HotJar:', userData);
      return true;
    } catch (error) {
      console.error('‚ùå Erro ao identificar usu√°rio no HotJar:', error);
      return false;
    }
  }, []);

  // Fun√ß√£o para rastrear eventos personalizados
  const trackEvent = useCallback((eventName: string, properties?: Record<string, any>) => {
    if (!window.hj) {
      console.warn('HotJar n√£o est√° dispon√≠vel para rastrear evento:', eventName);
      return false;
    }

    try {
      window.hj('event', eventName, properties);
      console.log('‚úÖ Evento rastreado no HotJar:', eventName, properties);
      return true;
    } catch (error) {
      console.error('‚ùå Erro ao rastrear evento no HotJar:', error);
      return false;
    }
  }, []);

  // Fun√ß√£o para rastrear convers√µes
  const trackConversion = useCallback((conversionName: string, value?: number) => {
    if (!window.hj) {
      console.warn('HotJar n√£o est√° dispon√≠vel para rastrear convers√£o:', conversionName);
      return false;
    }

    try {
      window.hj('conversion', conversionName, value);
      console.log('‚úÖ Convers√£o rastreada no HotJar:', conversionName, value);
      return true;
    } catch (error) {
      console.error('‚ùå Erro ao rastrear convers√£o no HotJar:', error);
      return false;
    }
  }, []);

  // Fun√ß√£o para rastrear p√°ginas
  const trackPageView = useCallback((pageName: string) => {
    if (!window.hj) {
      console.warn('HotJar n√£o est√° dispon√≠vel para rastrear p√°gina:', pageName);
      return false;
    }

    try {
      window.hj('stateChange', pageName);
      console.log('‚úÖ P√°gina rastreada no HotJar:', pageName);
      return true;
    } catch (error) {
      console.error('‚ùå Erro ao rastrear p√°gina no HotJar:', error);
      return false;
    }
  }, []);

  // Fun√ß√£o para obter informa√ß√µes de debug do HotJar
  const getDebugInfo = useCallback(() => {
    const info = {
      isAvailable: !!window.hj,
      settings: window._hjSettings,
      userAgent: navigator.userAgent,
      timestamp: new Date().toISOString(),
    };
    
    console.log('üîç Debug Info do HotJar:', info);
    return info;
  }, []);

  // Fun√ß√£o para testar a conectividade do HotJar
  const testConnection = useCallback(() => {
    if (!window.hj) {
      console.warn('‚ùå HotJar n√£o est√° dispon√≠vel para teste');
      return false;
    }

    try {
      // Enviar um evento de teste
      window.hj('event', 'hotjar_test_connection', {
        timestamp: new Date().toISOString(),
        test: true,
      });
      console.log('‚úÖ Teste de conex√£o do HotJar enviado com sucesso');
      return true;
    } catch (error) {
      console.error('‚ùå Erro no teste de conex√£o do HotJar:', error);
      return false;
    }
  }, []);

  return {
    identifyUser,
    trackEvent,
    trackConversion,
    trackPageView,
    isHotJarAvailable,
    getDebugInfo,
    testConnection,
  };
};
